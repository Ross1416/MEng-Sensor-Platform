{"ast":null,"code":"var _jsxFileName = \"/Users/apps4good/Documents/MEng Project/MEng-Sensor-Platform/user-interface/src/components/Panorama.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Panorama.css';\nimport { render } from 'react-dom';\n// import {CubeOutline, LayersOutline, PinOutline, ThermometerOutline, BrushOutline, ArrowDownCircleOutline, RadioOutline } from 'react-ionicons'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Panorama({\n  panorama,\n  locationName,\n  setLocationName\n}) {\n  _s();\n  // useEffect(() => {\n  //     // Fetch the photo URL from the backend\n  //     fetch(\"/api/photo\") // Flask server URL\n  //     .then((response) => {\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to fetch image: ${response.statusText}`);\n  //     }\n  //     return response.blob();\n  //   })\n  //   .then((blob) => {\n  //     const url = URL.createObjectURL(blob); // Create a URL for the image\n  //     setPhotoUrl(url); // Update state with the image URL\n  //   })\n  //   .catch((error) => {\n  //     console.error(\"Error fetching image:\", error);\n  //   });\n  //   }, []);\n\n  const [defaultToggle, setDefaultToggle] = useState(false);\n  const [showObjects, setShowObjects] = useState(false);\n  const [showMaterials, setShowMaterials] = useState(false);\n  const [showDistances, setShowDistances] = useState(false);\n  const [showConfidence, setShowConfidence] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [reset, setReset] = useState(false);\n  const [download, setDownload] = useState(false);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(panorama);\n  }, [panorama]);\n  const toggleButton = (state, stateFunction) => {\n    stateFunction(!state);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panorama-container\",\n    children: [panorama ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: panorama,\n      className: \"panorama\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'white',\n        margin: '10px'\n      },\n      children: \"Select a location from the map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottomBar\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"  \", locationName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Panorama, \"l5GK4yf/jICzSH0pmPsOwWs6wFY=\");\n_c = Panorama;\nvar _c;\n$RefreshReg$(_c, \"Panorama\");","map":{"version":3,"names":["React","useState","useEffect","render","jsxDEV","_jsxDEV","Panorama","panorama","locationName","setLocationName","_s","defaultToggle","setDefaultToggle","showObjects","setShowObjects","showMaterials","setShowMaterials","showDistances","setShowDistances","showConfidence","setShowConfidence","edit","setEdit","reset","setReset","download","setDownload","connected","setConnected","console","log","toggleButton","state","stateFunction","className","children","src","fileName","_jsxFileName","lineNumber","columnNumber","style","color","margin","_c","$RefreshReg$"],"sources":["/Users/apps4good/Documents/MEng Project/MEng-Sensor-Platform/user-interface/src/components/Panorama.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport '../styles/Panorama.css';\nimport { render } from 'react-dom'\n// import {CubeOutline, LayersOutline, PinOutline, ThermometerOutline, BrushOutline, ArrowDownCircleOutline, RadioOutline } from 'react-ionicons'\n\n\nexport function Panorama({panorama, locationName, setLocationName}) {\n\n    // useEffect(() => {\n    //     // Fetch the photo URL from the backend\n    //     fetch(\"/api/photo\") // Flask server URL\n    //     .then((response) => {\n    //     if (!response.ok) {\n    //       throw new Error(`Failed to fetch image: ${response.statusText}`);\n    //     }\n    //     return response.blob();\n    //   })\n    //   .then((blob) => {\n    //     const url = URL.createObjectURL(blob); // Create a URL for the image\n    //     setPhotoUrl(url); // Update state with the image URL\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error fetching image:\", error);\n    //   });\n    //   }, []);\n\n    const [defaultToggle, setDefaultToggle] = useState(false)\n    const [showObjects, setShowObjects] = useState(false)\n    const [showMaterials, setShowMaterials] = useState(false)\n    const [showDistances, setShowDistances] = useState(false)\n    const [showConfidence, setShowConfidence] = useState(false)\n    const [edit, setEdit] = useState(false)\n    const [reset, setReset] = useState(false)\n    const [download, setDownload] = useState(false)\n    const [connected, setConnected] = useState(false)\n\n    useEffect(()=> {\n        console.log(panorama)\n    }, [panorama])\n\n    const toggleButton = (state, stateFunction) => {\n        stateFunction(!state)\n    }\n\n\n\n    return (\n        <div className='panorama-container'>\n            {panorama ? (\n                <img src={panorama} className='panorama'/>\n            ) : \n            <p style={{color: 'white', margin: '10px'}}>Select a location from the map</p>\n            }\n            <div className='bottomBar'>\n                <h1>  {locationName}</h1>\n                {/* https://react-ionicons.netlify.app/ */}\n                {/* <button>\n                    <CubeOutline color={showObjects ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(showObjects, setShowObjects)}/>\n                </button>\n                <button>\n                    <LayersOutline color={showMaterials ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(showMaterials, setShowMaterials)}/>\n                </button>\n                <button>\n                    <PinOutline color={showDistances ? 'white' : '#00000'} height=\"30px\" width=\"30px\"onClick={() => toggleButton(showDistances, setShowDistances)}/>\n                </button>\n                <button>\n                    <ThermometerOutline color={showConfidence ? 'white' : '#00000'} height=\"30px\" width=\"30px\"onClick={() => toggleButton(showConfidence, setShowConfidence)} />\n                </button>\n                <button>\n                    <BrushOutline color={edit ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(edit, setEdit)}/>\n                </button>\n                <button>\n                    <ArrowDownCircleOutline color={download ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(download, setDownload)}/>\n                </button>\n                <button>\n                    <RefreshOutline color={reset ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(reset, setReset)} />\n                </button>\n                <button>\n                    <RadioOutline color={connected ? 'white' : '#00000'} height=\"30px\" width=\"30px\" onClick={() => toggleButton(connected, setConnected)} />\n                </button> */}\n\n            </div>\n{/* \n            <div className='topBar'>\n                <button>{'[]'}</button>\n                <button>{'[]'}</button>\n                <button>{'[]'}</button>\n            </div> */}\n        </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,wBAAwB;AAC/B,SAASC,MAAM,QAAQ,WAAW;AAClC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,OAAO,SAASC,QAAQA,CAAC;EAACC,QAAQ;EAAEC,YAAY;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAEhE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAK;IACX2B,OAAO,CAACC,GAAG,CAACvB,QAAQ,CAAC;EACzB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMwB,YAAY,GAAGA,CAACC,KAAK,EAAEC,aAAa,KAAK;IAC3CA,aAAa,CAAC,CAACD,KAAK,CAAC;EACzB,CAAC;EAID,oBACI3B,OAAA;IAAK6B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,GAC9B5B,QAAQ,gBACLF,OAAA;MAAK+B,GAAG,EAAE7B,QAAS;MAAC2B,SAAS,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBAE9CnC,OAAA;MAAGoC,KAAK,EAAE;QAACC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAE9EnC,OAAA;MAAK6B,SAAS,EAAC,WAAW;MAAAC,QAAA,eACtB9B,OAAA;QAAA8B,QAAA,GAAI,IAAE,EAAC3B,YAAY;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA2BxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAOL,CAAC;AAEd;AAAC9B,EAAA,CApFeJ,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}