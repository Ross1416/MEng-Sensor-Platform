{"ast":null,"code":"var _jsxFileName = \"/Users/apps4good/Documents/MEng Project/MEng-Sensor-Platform/user-interface/src/components/Map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from \"react-leaflet\";\nimport '../styles/Map.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from \"leaflet\";\n\n// Update Map Coordinates\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateMapCenter = ({\n  newCenter\n}) => {\n  _s();\n  const map = useMap();\n  map.setView(newCenter);\n};\n\n// Add a new pin\n_s(UpdateMapCenter, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = UpdateMapCenter;\nconst AddPinOnClick = ({\n  pins,\n  setPins\n}) => {\n  _s2();\n  useMapEvents({\n    click(e) {\n      const {\n        lat,\n        lng\n      } = e.latlng; // Get latitude and longitude of the click\n      setPins(pins => [...pins, {\n        id: Date.now(),\n        coords: [lat, lng],\n        img: ''\n      }]);\n    }\n  });\n};\n_s2(AddPinOnClick, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c2 = AddPinOnClick;\nexport function Map({\n  setPanorama\n}) {\n  _s3();\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // default to London\n  const [pins, setPins] = useState([{\n    id: 1,\n    coords: [55.86, -4.32],\n    img: require(\"../assets/panoramas/panorama.png\")\n  }, {\n    id: 2,\n    coords: [55.86, -4.34],\n    img: require(\"./images/img2.jpg\")\n  }, {\n    id: 3,\n    coords: [55.86, -4.36],\n    img: require(\"./images/img3.jpg\")\n  }]);\n\n  // periodically search for new pins\n  // const searchNewPins = async () => {\n\n  //   try {\n\n  //     const response = await fetch('../assets/analysis/example.json');\n  //     console.log(response)\n  //     console.log(j)\n\n  //     if (!response.ok) {\n  //       throw new Error(`HTTP error! status: ${response.status}`);\n  //     }\n  //     const data = await response.json();\n  //     console.log(\"JSON Contents:\", data);\n  //     // return data;\n  //   } catch (err) {\n  //     console.log(err)\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   // Define the function to run every 5 seconds\n  //   const asyncintervalId = setInterval(() => {\n  //     searchNewPins();\n  //   }, 5000);\n\n  //   // Cleanup interval when the component unmounts\n  //   return () => {\n  //     clearInterval(asyncintervalId);\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    // Fetching the JSON file containing the image data\n    fetch('../assets/analysis/analysis.json').then(resp => console.log(resp))\n    // .then(response => response.json())\n    .then(data => console.log(data)).catch(error => console.error('Error loading JSON:', error));\n  }, []);\n\n  // Set co-ords to users location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setMapCenter([latitude, longitude]);\n      }, err => {\n        console.log(err);\n      });\n    }\n  }, []);\n  const handlePinClick = pin => {\n    setPanorama(pin.img);\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    className: \"map\",\n    center: mapCenter // Latitude and Longitude (e.g., London)\n    ,\n    zoom: 15 // Zoom level\n    ,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://carto.com/\\\">CARTO</a>\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this), pins.map(pin => /*#__PURE__*/_jsxDEV(Marker, {\n      position: pin.coords,\n      icon: customIcon,\n      eventHandlers: {\n        click: () => handlePinClick(pin)\n      },\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: pin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 23\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 51\n        }, this), \" Coordinates:\", \" \", pin.coords.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }, this)\n    }, pin.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this)), /*#__PURE__*/_jsxDEV(UpdateMapCenter, {\n      newCenter: mapCenter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(AddPinOnClick, {\n      pins: pins,\n      setPins: setPins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 7\n  }, this);\n}\n_s3(Map, \"rznareTASWWYzbCYPA9gdtWtVPw=\");\n_c3 = Map;\nconst customIcon = L.divIcon({\n  className: \"emoji-icon\",\n  // Optional CSS for further styling\n  html: '<span style=\"font-size: 30px;\">üìç</span>' // Adjust the font-size\n});\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"UpdateMapCenter\");\n$RefreshReg$(_c2, \"AddPinOnClick\");\n$RefreshReg$(_c3, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","useMap","useMapEvents","L","jsxDEV","_jsxDEV","UpdateMapCenter","newCenter","_s","map","setView","_c","AddPinOnClick","pins","setPins","_s2","click","e","lat","lng","latlng","id","Date","now","coords","img","_c2","Map","setPanorama","_s3","mapCenter","setMapCenter","require","fetch","then","resp","console","log","data","catch","error","navigator","geolocation","getCurrentPosition","position","latitude","longitude","err","handlePinClick","pin","className","center","zoom","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","icon","customIcon","eventHandlers","name","join","_c3","divIcon","html","$RefreshReg$"],"sources":["/Users/apps4good/Documents/MEng Project/MEng-Sensor-Platform/user-interface/src/components/Map.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from \"react-leaflet\";\nimport '../styles/Map.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from \"leaflet\";\n\n// Update Map Coordinates\nconst UpdateMapCenter = ({ newCenter }) => {\n    const map = useMap();\n    map.setView(newCenter);\n};\n\n// Add a new pin\nconst AddPinOnClick = ({pins, setPins }) => {\n    useMapEvents({\n      click(e) {\n        const { lat, lng } = e.latlng; // Get latitude and longitude of the click\n        setPins((pins) => [\n          ...pins,\n          { id: Date.now(), coords: [lat, lng], img: ''},\n        ]);\n      },\n    });\n  };\n\n\n\nexport function Map({setPanorama}) {\n    \n    const [mapCenter, setMapCenter] = useState([51.505, -0.09]) // default to London\n    const [pins, setPins] = useState([{ id: 1, coords: [55.86, -4.32], img: require(\"../assets/panoramas/panorama.png\") }, { id: 2, coords: [55.86, -4.34], img: require(\"./images/img2.jpg\")}, { id: 3, coords: [55.86, -4.36], img: require(\"./images/img3.jpg\")}]);\n\n    // periodically search for new pins\n    // const searchNewPins = async () => {\n\n    //   try {\n\n    //     const response = await fetch('../assets/analysis/example.json');\n    //     console.log(response)\n    //     console.log(j)\n\n    //     if (!response.ok) {\n    //       throw new Error(`HTTP error! status: ${response.status}`);\n    //     }\n    //     const data = await response.json();\n    //     console.log(\"JSON Contents:\", data);\n    //     // return data;\n    //   } catch (err) {\n    //     console.log(err)\n    //   }\n    // }\n\n    // useEffect(() => {\n    //   // Define the function to run every 5 seconds\n    //   const asyncintervalId = setInterval(() => {\n    //     searchNewPins();\n    //   }, 5000);\n  \n    //   // Cleanup interval when the component unmounts\n    //   return () => {\n    //     clearInterval(asyncintervalId);\n    //   };\n    // }, []);\n\n    useEffect(() => {\n    // Fetching the JSON file containing the image data\n      fetch('../assets/analysis/analysis.json')\n        .then(resp => console.log(resp))\n        // .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(error => console.error('Error loading JSON:', error));\n    }, []);\n\n\n\n\n    // Set co-ords to users location\n    useEffect(()=> {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(      \n              (position) => {\n                const { latitude, longitude } = position.coords;\n                setMapCenter([latitude, longitude]);\n              },\n              (err) => {\n                console.log(err);\n              }\n            );\n          }\n    }, [])      \n\n\n    const handlePinClick = (pin) => {\n      setPanorama(pin.img)\n    };\n  \n    \n    return (\n   \n      <MapContainer\n          className='map'\n          center={mapCenter} // Latitude and Longitude (e.g., London)\n          zoom={15} // Zoom level\n          >\n          \n\n          <TileLayer\n              url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\n              attribution='&copy; <a href=\"https://carto.com/\">CARTO</a>'\n          />\n          {pins.map((pin) => (\n                  <Marker key={pin.id} position={pin.coords} icon={customIcon} eventHandlers={{\n                    click: () => handlePinClick(pin),\n                  }}>\n                  <Popup>\n                      <strong>{pin.name}</strong> <br /> Coordinates:{\" \"}\n                      {pin.coords.join(\", \")}\n                  </Popup>\n                  </Marker>\n              ))}\n          <UpdateMapCenter newCenter={mapCenter} />\n          <AddPinOnClick pins={pins} setPins={setPins} />\n      </MapContainer>\n\n    );\n}\n\nconst customIcon = L.divIcon({\n    className: \"emoji-icon\", // Optional CSS for further styling\n    html: '<span style=\"font-size: 30px;\">üìç</span>', // Adjust the font-size\n});"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAC5F,OAAO,mBAAmB;AAC1B,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAMC,GAAG,GAAGR,MAAM,CAAC,CAAC;EACpBQ,GAAG,CAACC,OAAO,CAACH,SAAS,CAAC;AAC1B,CAAC;;AAED;AAAAC,EAAA,CALMF,eAAe;EAAA,QACLL,MAAM;AAAA;AAAAU,EAAA,GADhBL,eAAe;AAMrB,MAAMM,aAAa,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EACxCb,YAAY,CAAC;IACXc,KAAKA,CAACC,CAAC,EAAE;MACP,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAGF,CAAC,CAACG,MAAM,CAAC,CAAC;MAC/BN,OAAO,CAAED,IAAI,IAAK,CAChB,GAAGA,IAAI,EACP;QAAEQ,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEC,MAAM,EAAE,CAACN,GAAG,EAAEC,GAAG,CAAC;QAAEM,GAAG,EAAE;MAAE,CAAC,CAC/C,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC;AAACV,GAAA,CAVEH,aAAa;EAAA,QACfV,YAAY;AAAA;AAAAwB,GAAA,GADVd,aAAa;AAcnB,OAAO,SAASe,GAAGA,CAAC;EAACC;AAAW,CAAC,EAAE;EAAAC,GAAA;EAE/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,EAAC;EAC5D,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,CAAC;IAAE0B,EAAE,EAAE,CAAC;IAAEG,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;IAAEC,GAAG,EAAEO,OAAO,CAAC,kCAAkC;EAAE,CAAC,EAAE;IAAEX,EAAE,EAAE,CAAC;IAAEG,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;IAAEC,GAAG,EAAEO,OAAO,CAAC,mBAAmB;EAAC,CAAC,EAAE;IAAEX,EAAE,EAAE,CAAC;IAAEG,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;IAAEC,GAAG,EAAEO,OAAO,CAAC,mBAAmB;EAAC,CAAC,CAAC,CAAC;;EAEjQ;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEApC,SAAS,CAAC,MAAM;IAChB;IACEqC,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAACC,IAAI,IAAIC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAC/B;IAAA,CACCD,IAAI,CAACI,IAAI,IAAIF,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;;EAKN;EACA5C,SAAS,CAAC,MAAK;IACX,IAAI6C,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACpB,MAAM;QAC/CO,YAAY,CAAC,CAACc,QAAQ,EAAEC,SAAS,CAAC,CAAC;MACrC,CAAC,EACAC,GAAG,IAAK;QACPX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC;MAClB,CACF,CAAC;IACH;EACN,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9BrB,WAAW,CAACqB,GAAG,CAACxB,GAAG,CAAC;EACtB,CAAC;EAGD,oBAEEpB,OAAA,CAACR,YAAY;IACTqD,SAAS,EAAC,KAAK;IACfC,MAAM,EAAErB,SAAU,CAAC;IAAA;IACnBsB,IAAI,EAAE,EAAG,CAAC;IAAA;IAAAC,QAAA,gBAIVhD,OAAA,CAACP,SAAS;MACNwD,GAAG,EAAC,gEAAgE;MACpEC,WAAW,EAAC;IAA+C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,EACD9C,IAAI,CAACJ,GAAG,CAAEwC,GAAG,iBACN5C,OAAA,CAACN,MAAM;MAAc6C,QAAQ,EAAEK,GAAG,CAACzB,MAAO;MAACoC,IAAI,EAAEC,UAAW;MAACC,aAAa,EAAE;QAC1E9C,KAAK,EAAEA,CAAA,KAAMgC,cAAc,CAACC,GAAG;MACjC,CAAE;MAAAI,QAAA,eACFhD,OAAA,CAACL,KAAK;QAAAqD,QAAA,gBACFhD,OAAA;UAAAgD,QAAA,EAASJ,GAAG,CAACc;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,KAAC,eAAAtD,OAAA;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,iBAAa,EAAC,GAAG,EAClDV,GAAG,CAACzB,MAAM,CAACwC,IAAI,CAAC,IAAI,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB;IAAC,GANKV,GAAG,CAAC5B,EAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOX,CACX,CAAC,eACNtD,OAAA,CAACC,eAAe;MAACC,SAAS,EAAEuB;IAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzCtD,OAAA,CAACO,aAAa;MAACC,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA;IAAQ;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAGrB;AAAC9B,GAAA,CAlGeF,GAAG;AAAAsC,GAAA,GAAHtC,GAAG;AAoGnB,MAAMkC,UAAU,GAAG1D,CAAC,CAAC+D,OAAO,CAAC;EACzBhB,SAAS,EAAE,YAAY;EAAE;EACzBiB,IAAI,EAAE,0CAA0C,CAAE;AACtD,CAAC,CAAC;AAAC,IAAAxD,EAAA,EAAAe,GAAA,EAAAuC,GAAA;AAAAG,YAAA,CAAAzD,EAAA;AAAAyD,YAAA,CAAA1C,GAAA;AAAA0C,YAAA,CAAAH,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}